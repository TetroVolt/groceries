// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  groceryCategory: (where?: GroceryCategoryWhereInput) => Promise<boolean>;
  groceryItem: (where?: GroceryItemWhereInput) => Promise<boolean>;
  groceryTrip: (where?: GroceryTripWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  groceryCategory: (
    where: GroceryCategoryWhereUniqueInput
  ) => GroceryCategoryNullablePromise;
  groceryCategories: (args?: {
    where?: GroceryCategoryWhereInput;
    orderBy?: GroceryCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GroceryCategory>;
  groceryCategoriesConnection: (args?: {
    where?: GroceryCategoryWhereInput;
    orderBy?: GroceryCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroceryCategoryConnectionPromise;
  groceryItem: (
    where: GroceryItemWhereUniqueInput
  ) => GroceryItemNullablePromise;
  groceryItems: (args?: {
    where?: GroceryItemWhereInput;
    orderBy?: GroceryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GroceryItem>;
  groceryItemsConnection: (args?: {
    where?: GroceryItemWhereInput;
    orderBy?: GroceryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroceryItemConnectionPromise;
  groceryTrip: (
    where: GroceryTripWhereUniqueInput
  ) => GroceryTripNullablePromise;
  groceryTrips: (args?: {
    where?: GroceryTripWhereInput;
    orderBy?: GroceryTripOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GroceryTrip>;
  groceryTripsConnection: (args?: {
    where?: GroceryTripWhereInput;
    orderBy?: GroceryTripOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroceryTripConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGroceryCategory: (
    data: GroceryCategoryCreateInput
  ) => GroceryCategoryPromise;
  updateGroceryCategory: (args: {
    data: GroceryCategoryUpdateInput;
    where: GroceryCategoryWhereUniqueInput;
  }) => GroceryCategoryPromise;
  updateManyGroceryCategories: (args: {
    data: GroceryCategoryUpdateManyMutationInput;
    where?: GroceryCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertGroceryCategory: (args: {
    where: GroceryCategoryWhereUniqueInput;
    create: GroceryCategoryCreateInput;
    update: GroceryCategoryUpdateInput;
  }) => GroceryCategoryPromise;
  deleteGroceryCategory: (
    where: GroceryCategoryWhereUniqueInput
  ) => GroceryCategoryPromise;
  deleteManyGroceryCategories: (
    where?: GroceryCategoryWhereInput
  ) => BatchPayloadPromise;
  createGroceryItem: (data: GroceryItemCreateInput) => GroceryItemPromise;
  updateGroceryItem: (args: {
    data: GroceryItemUpdateInput;
    where: GroceryItemWhereUniqueInput;
  }) => GroceryItemPromise;
  updateManyGroceryItems: (args: {
    data: GroceryItemUpdateManyMutationInput;
    where?: GroceryItemWhereInput;
  }) => BatchPayloadPromise;
  upsertGroceryItem: (args: {
    where: GroceryItemWhereUniqueInput;
    create: GroceryItemCreateInput;
    update: GroceryItemUpdateInput;
  }) => GroceryItemPromise;
  deleteGroceryItem: (where: GroceryItemWhereUniqueInput) => GroceryItemPromise;
  deleteManyGroceryItems: (
    where?: GroceryItemWhereInput
  ) => BatchPayloadPromise;
  createGroceryTrip: (data: GroceryTripCreateInput) => GroceryTripPromise;
  updateGroceryTrip: (args: {
    data: GroceryTripUpdateInput;
    where: GroceryTripWhereUniqueInput;
  }) => GroceryTripPromise;
  updateManyGroceryTrips: (args: {
    data: GroceryTripUpdateManyMutationInput;
    where?: GroceryTripWhereInput;
  }) => BatchPayloadPromise;
  upsertGroceryTrip: (args: {
    where: GroceryTripWhereUniqueInput;
    create: GroceryTripCreateInput;
    update: GroceryTripUpdateInput;
  }) => GroceryTripPromise;
  deleteGroceryTrip: (where: GroceryTripWhereUniqueInput) => GroceryTripPromise;
  deleteManyGroceryTrips: (
    where?: GroceryTripWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  groceryCategory: (
    where?: GroceryCategorySubscriptionWhereInput
  ) => GroceryCategorySubscriptionPayloadSubscription;
  groceryItem: (
    where?: GroceryItemSubscriptionWhereInput
  ) => GroceryItemSubscriptionPayloadSubscription;
  groceryTrip: (
    where?: GroceryTripSubscriptionWhereInput
  ) => GroceryTripSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GroceryItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "count_ASC"
  | "count_DESC"
  | "expiration_ASC"
  | "expiration_DESC"
  | "UPC_ASC"
  | "UPC_DESC";

export type GroceryCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "units_ASC"
  | "units_DESC";

export type GroceryTripOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "date_ASC"
  | "date_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GroceryCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroceryItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  associatedTrip?: Maybe<GroceryTripWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  count?: Maybe<Float>;
  count_not?: Maybe<Float>;
  count_in?: Maybe<Float[] | Float>;
  count_not_in?: Maybe<Float[] | Float>;
  count_lt?: Maybe<Float>;
  count_lte?: Maybe<Float>;
  count_gt?: Maybe<Float>;
  count_gte?: Maybe<Float>;
  expiration?: Maybe<String>;
  expiration_not?: Maybe<String>;
  expiration_in?: Maybe<String[] | String>;
  expiration_not_in?: Maybe<String[] | String>;
  expiration_lt?: Maybe<String>;
  expiration_lte?: Maybe<String>;
  expiration_gt?: Maybe<String>;
  expiration_gte?: Maybe<String>;
  expiration_contains?: Maybe<String>;
  expiration_not_contains?: Maybe<String>;
  expiration_starts_with?: Maybe<String>;
  expiration_not_starts_with?: Maybe<String>;
  expiration_ends_with?: Maybe<String>;
  expiration_not_ends_with?: Maybe<String>;
  UPC?: Maybe<String>;
  UPC_not?: Maybe<String>;
  UPC_in?: Maybe<String[] | String>;
  UPC_not_in?: Maybe<String[] | String>;
  UPC_lt?: Maybe<String>;
  UPC_lte?: Maybe<String>;
  UPC_gt?: Maybe<String>;
  UPC_gte?: Maybe<String>;
  UPC_contains?: Maybe<String>;
  UPC_not_contains?: Maybe<String>;
  UPC_starts_with?: Maybe<String>;
  UPC_not_starts_with?: Maybe<String>;
  UPC_ends_with?: Maybe<String>;
  UPC_not_ends_with?: Maybe<String>;
  AND?: Maybe<GroceryItemWhereInput[] | GroceryItemWhereInput>;
}

export interface GroceryTripWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  purchaser?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  AND?: Maybe<GroceryTripWhereInput[] | GroceryTripWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface GroceryCategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  units?: Maybe<String>;
  units_not?: Maybe<String>;
  units_in?: Maybe<String[] | String>;
  units_not_in?: Maybe<String[] | String>;
  units_lt?: Maybe<String>;
  units_lte?: Maybe<String>;
  units_gt?: Maybe<String>;
  units_gte?: Maybe<String>;
  units_contains?: Maybe<String>;
  units_not_contains?: Maybe<String>;
  units_starts_with?: Maybe<String>;
  units_not_starts_with?: Maybe<String>;
  units_ends_with?: Maybe<String>;
  units_not_ends_with?: Maybe<String>;
  items_some?: Maybe<GroceryItemWhereInput>;
  AND?: Maybe<GroceryCategoryWhereInput[] | GroceryCategoryWhereInput>;
}

export type GroceryItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GroceryTripWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface GroceryCategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  tags?: Maybe<GroceryCategoryCreatetagsInput>;
  units?: Maybe<String>;
  items?: Maybe<GroceryItemCreateManyInput>;
}

export interface GroceryCategoryCreatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface GroceryItemCreateManyInput {
  create?: Maybe<GroceryItemCreateInput[] | GroceryItemCreateInput>;
  connect?: Maybe<GroceryItemWhereUniqueInput[] | GroceryItemWhereUniqueInput>;
}

export interface GroceryItemCreateInput {
  id?: Maybe<ID_Input>;
  associatedTrip?: Maybe<GroceryTripCreateOneInput>;
  name: String;
  count: Float;
  expiration?: Maybe<String>;
  UPC?: Maybe<String>;
}

export interface GroceryTripCreateOneInput {
  create?: Maybe<GroceryTripCreateInput>;
  connect?: Maybe<GroceryTripWhereUniqueInput>;
}

export interface GroceryTripCreateInput {
  id?: Maybe<ID_Input>;
  purchaser: UserCreateOneInput;
  name: String;
  description?: Maybe<String>;
  date?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
}

export interface GroceryCategoryUpdateInput {
  name?: Maybe<String>;
  tags?: Maybe<GroceryCategoryUpdatetagsInput>;
  units?: Maybe<String>;
  items?: Maybe<GroceryItemUpdateManyInput>;
}

export interface GroceryCategoryUpdatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface GroceryItemUpdateManyInput {
  create?: Maybe<GroceryItemCreateInput[] | GroceryItemCreateInput>;
  update?: Maybe<
    | GroceryItemUpdateWithWhereUniqueNestedInput[]
    | GroceryItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | GroceryItemUpsertWithWhereUniqueNestedInput[]
    | GroceryItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<GroceryItemWhereUniqueInput[] | GroceryItemWhereUniqueInput>;
  connect?: Maybe<GroceryItemWhereUniqueInput[] | GroceryItemWhereUniqueInput>;
  set?: Maybe<GroceryItemWhereUniqueInput[] | GroceryItemWhereUniqueInput>;
  disconnect?: Maybe<
    GroceryItemWhereUniqueInput[] | GroceryItemWhereUniqueInput
  >;
  deleteMany?: Maybe<
    GroceryItemScalarWhereInput[] | GroceryItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | GroceryItemUpdateManyWithWhereNestedInput[]
    | GroceryItemUpdateManyWithWhereNestedInput
  >;
}

export interface GroceryItemUpdateWithWhereUniqueNestedInput {
  where: GroceryItemWhereUniqueInput;
  data: GroceryItemUpdateDataInput;
}

export interface GroceryItemUpdateDataInput {
  associatedTrip?: Maybe<GroceryTripUpdateOneInput>;
  name?: Maybe<String>;
  count?: Maybe<Float>;
  expiration?: Maybe<String>;
  UPC?: Maybe<String>;
}

export interface GroceryTripUpdateOneInput {
  create?: Maybe<GroceryTripCreateInput>;
  update?: Maybe<GroceryTripUpdateDataInput>;
  upsert?: Maybe<GroceryTripUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GroceryTripWhereUniqueInput>;
}

export interface GroceryTripUpdateDataInput {
  purchaser?: Maybe<UserUpdateOneRequiredInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  date?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface GroceryTripUpsertNestedInput {
  update: GroceryTripUpdateDataInput;
  create: GroceryTripCreateInput;
}

export interface GroceryItemUpsertWithWhereUniqueNestedInput {
  where: GroceryItemWhereUniqueInput;
  update: GroceryItemUpdateDataInput;
  create: GroceryItemCreateInput;
}

export interface GroceryItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  count?: Maybe<Float>;
  count_not?: Maybe<Float>;
  count_in?: Maybe<Float[] | Float>;
  count_not_in?: Maybe<Float[] | Float>;
  count_lt?: Maybe<Float>;
  count_lte?: Maybe<Float>;
  count_gt?: Maybe<Float>;
  count_gte?: Maybe<Float>;
  expiration?: Maybe<String>;
  expiration_not?: Maybe<String>;
  expiration_in?: Maybe<String[] | String>;
  expiration_not_in?: Maybe<String[] | String>;
  expiration_lt?: Maybe<String>;
  expiration_lte?: Maybe<String>;
  expiration_gt?: Maybe<String>;
  expiration_gte?: Maybe<String>;
  expiration_contains?: Maybe<String>;
  expiration_not_contains?: Maybe<String>;
  expiration_starts_with?: Maybe<String>;
  expiration_not_starts_with?: Maybe<String>;
  expiration_ends_with?: Maybe<String>;
  expiration_not_ends_with?: Maybe<String>;
  UPC?: Maybe<String>;
  UPC_not?: Maybe<String>;
  UPC_in?: Maybe<String[] | String>;
  UPC_not_in?: Maybe<String[] | String>;
  UPC_lt?: Maybe<String>;
  UPC_lte?: Maybe<String>;
  UPC_gt?: Maybe<String>;
  UPC_gte?: Maybe<String>;
  UPC_contains?: Maybe<String>;
  UPC_not_contains?: Maybe<String>;
  UPC_starts_with?: Maybe<String>;
  UPC_not_starts_with?: Maybe<String>;
  UPC_ends_with?: Maybe<String>;
  UPC_not_ends_with?: Maybe<String>;
  AND?: Maybe<GroceryItemScalarWhereInput[] | GroceryItemScalarWhereInput>;
  OR?: Maybe<GroceryItemScalarWhereInput[] | GroceryItemScalarWhereInput>;
  NOT?: Maybe<GroceryItemScalarWhereInput[] | GroceryItemScalarWhereInput>;
}

export interface GroceryItemUpdateManyWithWhereNestedInput {
  where: GroceryItemScalarWhereInput;
  data: GroceryItemUpdateManyDataInput;
}

export interface GroceryItemUpdateManyDataInput {
  name?: Maybe<String>;
  count?: Maybe<Float>;
  expiration?: Maybe<String>;
  UPC?: Maybe<String>;
}

export interface GroceryCategoryUpdateManyMutationInput {
  name?: Maybe<String>;
  tags?: Maybe<GroceryCategoryUpdatetagsInput>;
  units?: Maybe<String>;
}

export interface GroceryItemUpdateInput {
  associatedTrip?: Maybe<GroceryTripUpdateOneInput>;
  name?: Maybe<String>;
  count?: Maybe<Float>;
  expiration?: Maybe<String>;
  UPC?: Maybe<String>;
}

export interface GroceryItemUpdateManyMutationInput {
  name?: Maybe<String>;
  count?: Maybe<Float>;
  expiration?: Maybe<String>;
  UPC?: Maybe<String>;
}

export interface GroceryTripUpdateInput {
  purchaser?: Maybe<UserUpdateOneRequiredInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  date?: Maybe<String>;
}

export interface GroceryTripUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  date?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface GroceryCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroceryCategoryWhereInput>;
  AND?: Maybe<
    | GroceryCategorySubscriptionWhereInput[]
    | GroceryCategorySubscriptionWhereInput
  >;
}

export interface GroceryItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroceryItemWhereInput>;
  AND?: Maybe<
    GroceryItemSubscriptionWhereInput[] | GroceryItemSubscriptionWhereInput
  >;
}

export interface GroceryTripSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroceryTripWhereInput>;
  AND?: Maybe<
    GroceryTripSubscriptionWhereInput[] | GroceryTripSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface GroceryCategory {
  id: ID_Output;
  name: String;
  tags: String[];
  units?: String;
}

export interface GroceryCategoryPromise
  extends Promise<GroceryCategory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tags: () => Promise<String[]>;
  units: () => Promise<String>;
  items: <T = FragmentableArray<GroceryItem>>(args?: {
    where?: GroceryItemWhereInput;
    orderBy?: GroceryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroceryCategorySubscription
  extends Promise<AsyncIterator<GroceryCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  units: () => Promise<AsyncIterator<String>>;
  items: <T = Promise<AsyncIterator<GroceryItemSubscription>>>(args?: {
    where?: GroceryItemWhereInput;
    orderBy?: GroceryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroceryCategoryNullablePromise
  extends Promise<GroceryCategory | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tags: () => Promise<String[]>;
  units: () => Promise<String>;
  items: <T = FragmentableArray<GroceryItem>>(args?: {
    where?: GroceryItemWhereInput;
    orderBy?: GroceryItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroceryItem {
  id: ID_Output;
  name: String;
  count: Float;
  expiration?: String;
  UPC?: String;
}

export interface GroceryItemPromise extends Promise<GroceryItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  associatedTrip: <T = GroceryTripPromise>() => T;
  name: () => Promise<String>;
  count: () => Promise<Float>;
  expiration: () => Promise<String>;
  UPC: () => Promise<String>;
}

export interface GroceryItemSubscription
  extends Promise<AsyncIterator<GroceryItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  associatedTrip: <T = GroceryTripSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  count: () => Promise<AsyncIterator<Float>>;
  expiration: () => Promise<AsyncIterator<String>>;
  UPC: () => Promise<AsyncIterator<String>>;
}

export interface GroceryItemNullablePromise
  extends Promise<GroceryItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  associatedTrip: <T = GroceryTripPromise>() => T;
  name: () => Promise<String>;
  count: () => Promise<Float>;
  expiration: () => Promise<String>;
  UPC: () => Promise<String>;
}

export interface GroceryTrip {
  id: ID_Output;
  name: String;
  description?: String;
  date?: String;
}

export interface GroceryTripPromise extends Promise<GroceryTrip>, Fragmentable {
  id: () => Promise<ID_Output>;
  purchaser: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  date: () => Promise<String>;
}

export interface GroceryTripSubscription
  extends Promise<AsyncIterator<GroceryTrip>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  purchaser: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
}

export interface GroceryTripNullablePromise
  extends Promise<GroceryTrip | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  purchaser: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  date: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  email: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
}

export interface GroceryCategoryConnection {
  pageInfo: PageInfo;
  edges: GroceryCategoryEdge[];
}

export interface GroceryCategoryConnectionPromise
  extends Promise<GroceryCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroceryCategoryEdge>>() => T;
  aggregate: <T = AggregateGroceryCategoryPromise>() => T;
}

export interface GroceryCategoryConnectionSubscription
  extends Promise<AsyncIterator<GroceryCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroceryCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroceryCategorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GroceryCategoryEdge {
  node: GroceryCategory;
  cursor: String;
}

export interface GroceryCategoryEdgePromise
  extends Promise<GroceryCategoryEdge>,
    Fragmentable {
  node: <T = GroceryCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroceryCategoryEdgeSubscription
  extends Promise<AsyncIterator<GroceryCategoryEdge>>,
    Fragmentable {
  node: <T = GroceryCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroceryCategory {
  count: Int;
}

export interface AggregateGroceryCategoryPromise
  extends Promise<AggregateGroceryCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroceryCategorySubscription
  extends Promise<AsyncIterator<AggregateGroceryCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroceryItemConnection {
  pageInfo: PageInfo;
  edges: GroceryItemEdge[];
}

export interface GroceryItemConnectionPromise
  extends Promise<GroceryItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroceryItemEdge>>() => T;
  aggregate: <T = AggregateGroceryItemPromise>() => T;
}

export interface GroceryItemConnectionSubscription
  extends Promise<AsyncIterator<GroceryItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroceryItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroceryItemSubscription>() => T;
}

export interface GroceryItemEdge {
  node: GroceryItem;
  cursor: String;
}

export interface GroceryItemEdgePromise
  extends Promise<GroceryItemEdge>,
    Fragmentable {
  node: <T = GroceryItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroceryItemEdgeSubscription
  extends Promise<AsyncIterator<GroceryItemEdge>>,
    Fragmentable {
  node: <T = GroceryItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroceryItem {
  count: Int;
}

export interface AggregateGroceryItemPromise
  extends Promise<AggregateGroceryItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroceryItemSubscription
  extends Promise<AsyncIterator<AggregateGroceryItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroceryTripConnection {
  pageInfo: PageInfo;
  edges: GroceryTripEdge[];
}

export interface GroceryTripConnectionPromise
  extends Promise<GroceryTripConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroceryTripEdge>>() => T;
  aggregate: <T = AggregateGroceryTripPromise>() => T;
}

export interface GroceryTripConnectionSubscription
  extends Promise<AsyncIterator<GroceryTripConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroceryTripEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroceryTripSubscription>() => T;
}

export interface GroceryTripEdge {
  node: GroceryTrip;
  cursor: String;
}

export interface GroceryTripEdgePromise
  extends Promise<GroceryTripEdge>,
    Fragmentable {
  node: <T = GroceryTripPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroceryTripEdgeSubscription
  extends Promise<AsyncIterator<GroceryTripEdge>>,
    Fragmentable {
  node: <T = GroceryTripSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroceryTrip {
  count: Int;
}

export interface AggregateGroceryTripPromise
  extends Promise<AggregateGroceryTrip>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroceryTripSubscription
  extends Promise<AsyncIterator<AggregateGroceryTrip>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GroceryCategorySubscriptionPayload {
  mutation: MutationType;
  node: GroceryCategory;
  updatedFields: String[];
  previousValues: GroceryCategoryPreviousValues;
}

export interface GroceryCategorySubscriptionPayloadPromise
  extends Promise<GroceryCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroceryCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroceryCategoryPreviousValuesPromise>() => T;
}

export interface GroceryCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroceryCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroceryCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroceryCategoryPreviousValuesSubscription>() => T;
}

export interface GroceryCategoryPreviousValues {
  id: ID_Output;
  name: String;
  tags: String[];
  units?: String;
}

export interface GroceryCategoryPreviousValuesPromise
  extends Promise<GroceryCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tags: () => Promise<String[]>;
  units: () => Promise<String>;
}

export interface GroceryCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<GroceryCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  units: () => Promise<AsyncIterator<String>>;
}

export interface GroceryItemSubscriptionPayload {
  mutation: MutationType;
  node: GroceryItem;
  updatedFields: String[];
  previousValues: GroceryItemPreviousValues;
}

export interface GroceryItemSubscriptionPayloadPromise
  extends Promise<GroceryItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroceryItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroceryItemPreviousValuesPromise>() => T;
}

export interface GroceryItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroceryItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroceryItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroceryItemPreviousValuesSubscription>() => T;
}

export interface GroceryItemPreviousValues {
  id: ID_Output;
  name: String;
  count: Float;
  expiration?: String;
  UPC?: String;
}

export interface GroceryItemPreviousValuesPromise
  extends Promise<GroceryItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  count: () => Promise<Float>;
  expiration: () => Promise<String>;
  UPC: () => Promise<String>;
}

export interface GroceryItemPreviousValuesSubscription
  extends Promise<AsyncIterator<GroceryItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  count: () => Promise<AsyncIterator<Float>>;
  expiration: () => Promise<AsyncIterator<String>>;
  UPC: () => Promise<AsyncIterator<String>>;
}

export interface GroceryTripSubscriptionPayload {
  mutation: MutationType;
  node: GroceryTrip;
  updatedFields: String[];
  previousValues: GroceryTripPreviousValues;
}

export interface GroceryTripSubscriptionPayloadPromise
  extends Promise<GroceryTripSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroceryTripPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroceryTripPreviousValuesPromise>() => T;
}

export interface GroceryTripSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroceryTripSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroceryTripSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroceryTripPreviousValuesSubscription>() => T;
}

export interface GroceryTripPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  date?: String;
}

export interface GroceryTripPreviousValuesPromise
  extends Promise<GroceryTripPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  date: () => Promise<String>;
}

export interface GroceryTripPreviousValuesSubscription
  extends Promise<AsyncIterator<GroceryTripPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "GroceryTrip",
    embedded: false
  },
  {
    name: "GroceryItem",
    embedded: false
  },
  {
    name: "GroceryCategory",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/groceries/dev`
});
export const prisma = new Prisma();
