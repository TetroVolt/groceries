// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateGroceryCategory {
  count: Int!
}

type AggregateGroceryItem {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type GroceryCategory {
  id: ID!
  name: String!
  description: String
  units: String
}

type GroceryCategoryConnection {
  pageInfo: PageInfo!
  edges: [GroceryCategoryEdge]!
  aggregate: AggregateGroceryCategory!
}

input GroceryCategoryCreateInput {
  id: ID
  name: String!
  description: String
  units: String
}

input GroceryCategoryCreateOneInput {
  create: GroceryCategoryCreateInput
  connect: GroceryCategoryWhereUniqueInput
}

type GroceryCategoryEdge {
  node: GroceryCategory!
  cursor: String!
}

enum GroceryCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  units_ASC
  units_DESC
}

type GroceryCategoryPreviousValues {
  id: ID!
  name: String!
  description: String
  units: String
}

type GroceryCategorySubscriptionPayload {
  mutation: MutationType!
  node: GroceryCategory
  updatedFields: [String!]
  previousValues: GroceryCategoryPreviousValues
}

input GroceryCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroceryCategoryWhereInput
  AND: [GroceryCategorySubscriptionWhereInput!]
}

input GroceryCategoryUpdateDataInput {
  name: String
  description: String
  units: String
}

input GroceryCategoryUpdateInput {
  name: String
  description: String
  units: String
}

input GroceryCategoryUpdateManyMutationInput {
  name: String
  description: String
  units: String
}

input GroceryCategoryUpdateOneInput {
  create: GroceryCategoryCreateInput
  update: GroceryCategoryUpdateDataInput
  upsert: GroceryCategoryUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: GroceryCategoryWhereUniqueInput
}

input GroceryCategoryUpsertNestedInput {
  update: GroceryCategoryUpdateDataInput!
  create: GroceryCategoryCreateInput!
}

input GroceryCategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  units: String
  units_not: String
  units_in: [String!]
  units_not_in: [String!]
  units_lt: String
  units_lte: String
  units_gt: String
  units_gte: String
  units_contains: String
  units_not_contains: String
  units_starts_with: String
  units_not_starts_with: String
  units_ends_with: String
  units_not_ends_with: String
  AND: [GroceryCategoryWhereInput!]
}

input GroceryCategoryWhereUniqueInput {
  id: ID
  name: String
}

type GroceryItem {
  id: ID!
  name: String!
  description: String
  count: Float!
  expiration: DateTime
  UPC: String
  category: GroceryCategory
}

type GroceryItemConnection {
  pageInfo: PageInfo!
  edges: [GroceryItemEdge]!
  aggregate: AggregateGroceryItem!
}

input GroceryItemCreateInput {
  id: ID
  name: String!
  description: String
  count: Float
  expiration: DateTime
  UPC: String
  category: GroceryCategoryCreateOneInput
}

type GroceryItemEdge {
  node: GroceryItem!
  cursor: String!
}

enum GroceryItemOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  count_ASC
  count_DESC
  expiration_ASC
  expiration_DESC
  UPC_ASC
  UPC_DESC
}

type GroceryItemPreviousValues {
  id: ID!
  name: String!
  description: String
  count: Float!
  expiration: DateTime
  UPC: String
}

type GroceryItemSubscriptionPayload {
  mutation: MutationType!
  node: GroceryItem
  updatedFields: [String!]
  previousValues: GroceryItemPreviousValues
}

input GroceryItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroceryItemWhereInput
  AND: [GroceryItemSubscriptionWhereInput!]
}

input GroceryItemUpdateInput {
  name: String
  description: String
  count: Float
  expiration: DateTime
  UPC: String
  category: GroceryCategoryUpdateOneInput
}

input GroceryItemUpdateManyMutationInput {
  name: String
  description: String
  count: Float
  expiration: DateTime
  UPC: String
}

input GroceryItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  count: Float
  count_not: Float
  count_in: [Float!]
  count_not_in: [Float!]
  count_lt: Float
  count_lte: Float
  count_gt: Float
  count_gte: Float
  expiration: DateTime
  expiration_not: DateTime
  expiration_in: [DateTime!]
  expiration_not_in: [DateTime!]
  expiration_lt: DateTime
  expiration_lte: DateTime
  expiration_gt: DateTime
  expiration_gte: DateTime
  UPC: String
  UPC_not: String
  UPC_in: [String!]
  UPC_not_in: [String!]
  UPC_lt: String
  UPC_lte: String
  UPC_gt: String
  UPC_gte: String
  UPC_contains: String
  UPC_not_contains: String
  UPC_starts_with: String
  UPC_not_starts_with: String
  UPC_ends_with: String
  UPC_not_ends_with: String
  category: GroceryCategoryWhereInput
  AND: [GroceryItemWhereInput!]
}

input GroceryItemWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createGroceryCategory(data: GroceryCategoryCreateInput!): GroceryCategory!
  updateGroceryCategory(data: GroceryCategoryUpdateInput!, where: GroceryCategoryWhereUniqueInput!): GroceryCategory
  updateManyGroceryCategories(data: GroceryCategoryUpdateManyMutationInput!, where: GroceryCategoryWhereInput): BatchPayload!
  upsertGroceryCategory(where: GroceryCategoryWhereUniqueInput!, create: GroceryCategoryCreateInput!, update: GroceryCategoryUpdateInput!): GroceryCategory!
  deleteGroceryCategory(where: GroceryCategoryWhereUniqueInput!): GroceryCategory
  deleteManyGroceryCategories(where: GroceryCategoryWhereInput): BatchPayload!
  createGroceryItem(data: GroceryItemCreateInput!): GroceryItem!
  updateGroceryItem(data: GroceryItemUpdateInput!, where: GroceryItemWhereUniqueInput!): GroceryItem
  updateManyGroceryItems(data: GroceryItemUpdateManyMutationInput!, where: GroceryItemWhereInput): BatchPayload!
  upsertGroceryItem(where: GroceryItemWhereUniqueInput!, create: GroceryItemCreateInput!, update: GroceryItemUpdateInput!): GroceryItem!
  deleteGroceryItem(where: GroceryItemWhereUniqueInput!): GroceryItem
  deleteManyGroceryItems(where: GroceryItemWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  groceryCategory(where: GroceryCategoryWhereUniqueInput!): GroceryCategory
  groceryCategories(where: GroceryCategoryWhereInput, orderBy: GroceryCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroceryCategory]!
  groceryCategoriesConnection(where: GroceryCategoryWhereInput, orderBy: GroceryCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroceryCategoryConnection!
  groceryItem(where: GroceryItemWhereUniqueInput!): GroceryItem
  groceryItems(where: GroceryItemWhereInput, orderBy: GroceryItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GroceryItem]!
  groceryItemsConnection(where: GroceryItemWhereInput, orderBy: GroceryItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroceryItemConnection!
  node(id: ID!): Node
}

type Subscription {
  groceryCategory(where: GroceryCategorySubscriptionWhereInput): GroceryCategorySubscriptionPayload
  groceryItem(where: GroceryItemSubscriptionWhereInput): GroceryItemSubscriptionPayload
}
`